package org.ishafoundation.dwaraapi.utils;

import java.time.LocalDateTime;

import org.ishafoundation.dwaraapi.db.dao.master.jointables.ActionelementDao;
import org.ishafoundation.dwaraapi.db.dao.transactional.JobDao;
import org.ishafoundation.dwaraapi.db.model.transactional.Job;
import org.ishafoundation.dwaraapi.enumreferences.Status;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Component;

@Component
public class JobUtils {

	private static final Logger logger = LoggerFactory.getLogger(JobUtils.class);
	
	@Autowired
	private ActionelementDao actionelementDao;	
	
	@Autowired
	private JobDao jobDao;	

//	public Job createAndSaveJob(Actionelement actionelement, Subrequest subrequest, Library library) {
//		Job job = new Job();
//		Tasktype tasktype = actionelement.getTasktype();
//		int taskId = actionelement.getTaskId();
//		job.setTaskId(taskId);
//		job.setTasktype(tasktype);
//		// If a task contains prerequisite task that means its a derived one, for which the input library id needs to set by the prerequisite/parent task's job at the time of its processing and not at the time of job creation...
//		// for eg., Mezz copy wont have a input library id upfront, which will be generated by its prerequisite/parent Mezz Transcoding job...
//		if(actionelement.getPreTaskId() == null) {
//			job.setInputLibraryId(library.getId());
//		}
//
//		job.setActionelement(actionelement);
//		job.setSubrequest(subrequest);				
//		job.setCreatedAt(LocalDateTime.now());
//		job.setStatus(Status.queued);
//		return job = saveJob(job);
//	}
//	
//	public Job createAndSaveJob(Job parentWrapperJob) {
//		Job job = new Job();
//	
//		if(parentWrapperJob != null)
//			job.setJobRef(parentWrapperJob);
//		
//		job.setTasktype(org.ishafoundation.dwaraapi.enumreferences.Tasktype.storage);
//		int taskId = storagetaskAttributeConverter.convertToDatabaseColumn(storagetask);
//		job.setTaskId(taskId);
//		job.setSubrequest(parentWrapperJob.getSubrequest());
//		job.setInputLibraryId(parentWrapperJob.getInputLibraryId());
//		job.setCreatedAt(LocalDateTime.now());
//		job.setStatus(Status.queued);
//		job = saveJob(job);
//	}

	public void updateJobInProgress(Job job) {
		job.setStartedAt(LocalDateTime.now());
		updateJobStatus(job, Status.in_progress);
	}
	
	public void updateJobCompleted(Job job) {
		job.setCompletedAt(LocalDateTime.now());
		updateJobStatus(job, Status.completed);
	}
	
	public void updateJobFailed(Job job) {
		updateJobStatus(job, Status.failed);
	}
	
	public void updateJobStatus(Job job, Status status) {
		job.setStatus(status);
		logger.debug("DB Job Updation " + status);
		jobDao.save(job);
		logger.trace("DB Job Updation - Success");
	}
	
	public Job saveJob(Job job) {
		logger.debug("DB Job row Creation");   
		job = jobDao.save(job);
		logger.trace("DB Job row Creation - Success");
		return job;
	}
}
