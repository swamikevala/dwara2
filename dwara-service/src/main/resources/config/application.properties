dwara.database.name=dwara_v3

server.error.whitelabel.enabled=false

# DB stuff
spring.datasource.driver-class-name=com.mysql.cj.jdbc.Driver
spring.datasource.url=jdbc:mysql://localhost:3306/${dwara.database.name}?useSSL=false&useLegacyDatetimeCode=false&serverTimezone=Asia/Kolkata
spring.datasource.username=dwara
spring.datasource.password=SadhanaPada9!
spring.datasource.hikari.maximumPoolSize=20
spring.jpa.properties.hibernate.dialect=org.hibernate.dialect.MySQL57Dialect
# disabling Hibernate's auto schema generation
spring.jpa.hibernate.ddl-auto=update
# TODO This is an anti pattern according to https://vladmihalcea.com/the-hibernate-enable_lazy_load_no_trans-anti-pattern/
# While we are not bothered about performance we need to see if we can improve this like mentioned in
# https://vladmihalcea.com/the-best-way-to-map-a-projection-query-to-a-dto-with-jpa-and-hibernate/
# Dont understand whats recommended and so skipping the improved version - for now...
spring.jpa.properties.hibernate.enable_lazy_load_no_trans=true

# To warn when foldernames has special characters in it. Anything other than the Specified characters here shouldnt be there in the folder name
#\\w = Any word character, short for [a-zA-Z_0-9]
regexAllowedChrsInFileName=[\\w-.]*

isLibraryFileSystemPermissionsNeedToBeSet=true

libraryFile_ChangePermissionsScriptPath=/opt/dwara/bin/setperms

junkFilesFinderRegexPatternList=\\._[^\\/]*$,\\.DS_Store$,\\.fseventsd$,\\..Spotlight-V100$,\\.TemporaryItems$,\\.Trashes$,\\.VolumeIcon.icns$,\\.fcpcache$

junkFilesStagedDirName=.dwara-ignored

readyToIngestSrcDirRoot=/data/user

filesystem.temporarylocation=/data/tmp
commandlineExecutor.errorResponseTemporaryLocation=${filesystem.temporarylocation}

checksumType=sha256
checksumTypeSupportsStreamingVerification=true
encryptionAlgorithm=
useMbuffer=true

threadpoolexecutor.checksum-generation.corePoolSize=5
threadpoolexecutor.checksum-generation.maxPoolSize=5
threadpoolexecutor.previewproxy-video-transcoding.corePoolSize=5
threadpoolexecutor.previewproxy-video-transcoding.maxPoolSize=5
threadpoolexecutor.mam-updation.corePoolSize=1
threadpoolexecutor.mam-updation.maxPoolSize=1


threadpoolexecutor.video_medium_resolution_transcoding.corePoolSize=1
threadpoolexecutor.video_medium_resolution_transcoding.maxPoolSize=1
threadpoolexecutor.audio_transcoding.corePoolSize=1
threadpoolexecutor.audio_transcoding.maxPoolSize=1
threadpoolexecutor.copy_to_transcript_server.corePoolSize=1
threadpoolexecutor.copy_to_transcript_server.maxPoolSize=1

sshPrvKeyFileLocation=C:\\Users\\prakash\\.ssh\\id_rsa



# CatDV block
# For Constructing Server's URL
catdv.isSecured=false
catdv.host=localhost
catdv.port=8080

# SSH credentials
catdv.sshSystemUser=pgurumurthy
# the proxies location
catdv.sshProxiesRootLocation=C:\\data\\proxies

# Web UI Credentials
catdv.webUserID=Administrator
catdv.webUserPwd=

# These are the catalog Ids where the clip need to be inserted - To be revisited...
catdv.publicGroupId=2
catdv.privateGroupId=358

# used when there are drives busy preventing mapping drives. The mapper waits for the below millis and then checks again if all the drives are available or not...
tapedrivemapping.pollinterval=60000

# the blocksize we will be using to write/read
tape.blocksize=256000

volume.label.ownerId=ISHAFOUNDATION
volume.label.implementationId=DWARA

# To check if a the volume used is indeed the right volume we need to check the label. But its not needed if the check just happened for a job before 
# in seconds
rightVolumeCheckInterval=60
restoreTmpLocationForVerification=${filesystem.temporarylocation}/restoredforverification
restoreInProgressFileIdentifier=.restoring